test<-data[i,]
forestpred<-randomForest(survived~.,data=train)
err<-sum(test[[1]]==predict(forestpred,newdata=test,type="class"))/nrow(test)
err.vect[i]<-err
}
return(err.vect)
}
a<-kfold.rf(train,10)
a
mean(a)
t1<-randomForest(survived~.,data=train,mtry=4)
summary(t1)
t1
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=4)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=4)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=4)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=4)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=5)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=6)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=5)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=5,ntree = 100)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=5,ntree = 200)
modelacc(train,t1)
submission = predict(t1,newdata=test,type="class")
test_submission = test
test_submission[[1]] <- submission
# write file
submission_file_name = paste("./Submissions/submission",as.character(iteration),".csv",sep="")
submission_file_name
write.csv(test_submission,file=submission_file_name,row.names=FALSE)
diffsub(7,10)
library(tree)
require(maptree)
library(randomForest)
setwd("/Users/aszostek/Projects/Kaggle/Titanic")
source("./Utils/submission_utils.R")
iteration = 10
# -----------------------
# Read Data
train.org <- read.csv(file="./Data/train.csv")
test.org <- read.csv(file="./Data/test.csv")
# -----------------------
# Data transoformations and feature creation
# Function to get the title of the passanger
gettitle<-function(name)
{
lname<-sub("^.*, ","",name)
lname<-sub("\\. .*$","",lname)
return(lname)
}
# Function which calculates an age for a given title Mr, Miss etc
# It uses information from both training and test set
# This function operates on original training set and test set!
age_title<-function()
{
# take original data
tr1<-train.org
te1<-test.org
# add survivor column to test set
te1<-cbind(factor(sample(c(0,1),nrow(te1),replace=T),levels=c(0,1)),te1)
names(te1)[[1]]<-"survived"
# Combine two tables togethe
all<-rbind(tr1,te1)
# select only samples with age provided
all<-all[!is.na(all$age),]
# Extract only Mr, Miss. etc
lname<-as.character(all[[3]])
lname<-sub("^.*, ","",lname)
lname<-sub("\\. .*$","",lname)
all$title<-as.factor(lname)
all<-all[,c("age","title","pclass")]
all$pclass <- as.factor(all$pclass)
fit <- lm(age ~ title+pclass,data=all)
return(fit)
}
guess.age<-function(passanger)
{
return(predict(age_title(),newdata=passanger)[[1]])
}
data.transformation<-function(data)
{
# If embarked missing fill with most frequent option which is S
data[data$embarked=="","embarked"]<-"S"
# calculate title of the passanger
data$title <- unlist(lapply(as.character(data$name),function(x) gettitle(x)))
# Clean classes of each column
if(names(data)[[1]]=="survived") data$survived<-as.factor(data$survived)
data$pclass<-as.factor(data$pclass)
data$name<-as.character(data$name)
data$ticket<-as.character(data$ticket)
data$cabin<-as.character(data$cabin)
data$embarked<-as.factor(as.character(data$embarked))
data$title<-as.factor(as.character(data$title))
data$sibsp<-as.numeric(data$sibsp)
data$parch <- as.numeric(data$parch)
# If it is a test set and doesn't have a survived column add one with fake data
# it is useful to have the same number of columns in training and test set
if(names(data)[[1]]!="survived")
{
data<-cbind(factor(sample(c(0,1),nrow(data),replace=T),levels=c(0,1)),data)
names(data)[[1]]<-"survived"
}
# Fill in missing age
# This function guesses age based on the title of the passange
for(i in 1:nrow(data))
{
if (is.na(data[i,"age"]))
data[i,"age"]<-guess.age(data[i,])
}
# Number of family members
data$family <- data$sibsp+data$parch+1
return(data[,c(-3,-8,-9,-10,-12)])
}
train <- data.transformation(train.org)
test <- data.transformation(test.org)
# Train classification tree on a training set
t1<-randomForest(survived~.,data=train,mtry=5,ntree = 200)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=5,ntree = 800)
modelacc(train,t1)
View(train)
t1<-randomForest(survived~.,data=train,mtry=4,ntree = 800)
modelacc(train,t1)
submission = predict(t1,newdata=test,type="class")
test_submission = test
test_submission[[1]] <- submission
submission_file_name = paste("./Submissions/submission",as.character(iteration),".csv",sep="")
submission_file_name
write.csv(test_submission,file=submission_file_name,row.names=FALSE)
diffsub(7,11)
iteration = 11
submission = predict(t1,newdata=test,type="class")
test_submission = test
test_submission[[1]] <- submission
# write file
submission_file_name = paste("./Submissions/submission",as.character(iteration),".csv",sep="")
submission_file_name
write.csv(test_submission,file=submission_file_name,row.names=FALSE)
diffsub(7,11)
diffsub(10,11)
library(tree)
require(maptree)
library(randomForest)
setwd("/Users/aszostek/Projects/Kaggle/Titanic")
source("./Utils/submission_utils.R")
iteration = 10
# -----------------------
# Read Data
train.org <- read.csv(file="./Data/train.csv")
test.org <- read.csv(file="./Data/test.csv")
# -----------------------
# Data transoformations and feature creation
# Function to get the title of the passanger
gettitle<-function(name)
{
lname<-sub("^.*, ","",name)
lname<-sub("\\. .*$","",lname)
return(lname)
}
# Function which calculates an age for a given title Mr, Miss etc
# It uses information from both training and test set
# This function operates on original training set and test set!
age_title<-function()
{
# take original data
tr1<-train.org
te1<-test.org
# add survivor column to test set
te1<-cbind(factor(sample(c(0,1),nrow(te1),replace=T),levels=c(0,1)),te1)
names(te1)[[1]]<-"survived"
# Combine two tables togethe
all<-rbind(tr1,te1)
# select only samples with age provided
all<-all[!is.na(all$age),]
# Extract only Mr, Miss. etc
lname<-as.character(all[[3]])
lname<-sub("^.*, ","",lname)
lname<-sub("\\. .*$","",lname)
all$title<-as.factor(lname)
all<-all[,c("age","title","pclass")]
all$pclass <- as.factor(all$pclass)
fit <- lm(age ~ title+pclass,data=all)
return(fit)
}
guess.age<-function(passanger)
{
return(predict(age_title(),newdata=passanger)[[1]])
}
data.transformation<-function(data)
{
# If embarked missing fill with most frequent option which is S
data[data$embarked=="","embarked"]<-"S"
# calculate title of the passanger
data$title <- unlist(lapply(as.character(data$name),function(x) gettitle(x)))
# Clean classes of each column
if(names(data)[[1]]=="survived") data$survived<-as.factor(data$survived)
data$pclass<-as.factor(data$pclass)
data$name<-as.character(data$name)
data$ticket<-as.character(data$ticket)
data$cabin<-as.character(data$cabin)
data$embarked<-as.factor(as.character(data$embarked))
data$title<-as.factor(as.character(data$title))
data$sibsp<-as.numeric(data$sibsp)
data$parch <- as.numeric(data$parch)
# If it is a test set and doesn't have a survived column add one with fake data
# it is useful to have the same number of columns in training and test set
if(names(data)[[1]]!="survived")
{
data<-cbind(factor(sample(c(0,1),nrow(data),replace=T),levels=c(0,1)),data)
names(data)[[1]]<-"survived"
}
# Fill in missing age
# This function guesses age based on the title of the passange
for(i in 1:nrow(data))
{
if (is.na(data[i,"age"]))
data[i,"age"]<-guess.age(data[i,])
}
# Number of family members
data$family <- data$sibsp+data$parch+1
return(data[,c(-3,-8,-9,-10,-12)])
}
train <- data.transformation(train.org)
test <- data.transformation(test.org)
# Train classification tree on a training set
t1<-randomForest(survived~.,data=train,mtry=5,ntree = 200)
modelacc(train,t1)
# ------------------------
# Cross Validate
kfold.rf<-function(data,k)
{
n<-as.integer(nrow(data)/k)
err.vect<-rep(NA,k)
for (i in 1:k)
{
subset<-((i-1)*n+1):(i*n)
train<-data[-subset,]
test<-data[subset,]
forestpred<-randomForest(survived~.,data=train)
err<-sum(test[[1]]==predict(forestpred,newdata=test,type="class"))/nrow(test)
err.vect[i]<-err
}
return(err.vect)
}
leavoneout.rf<-function(data)
{
err.vect<-rep(NA,nrow(data))
for (i in 1:nrow(data))
{
train<-data[c(-i),]
test<-data[i,]
forestpred<-randomForest(survived~.,data=train)
err<-sum(test[[1]]==predict(forestpred,newdata=test,type="class"))/nrow(test)
err.vect[i]<-err
}
return(err.vect)
}
a<-kfold.rf(train,10)
a
mean(a)
t1<-randomForest(survived~.,data=train,mtry=5,ntree = 200)
modelacc(train,t1)
submission = predict(t1,newdata=test,type="class")
test_submission = test
test_submission[[1]] <- submission
submission_file_name = paste("./Submissions/submission",as.character(iteration),".csv",sep="")
submission_file_name
write.csv(test_submission,file=submission_file_name,row.names=FALSE)
diffsub(10,11)
t1<-randomForest(survived~.,data=train,mtry=4,ntree = 800)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 800)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 100)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 500)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=418)
modelacc(train,t1)
0.832*891
0.632*891
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=400)
modelacc(train,t1)
a<-kfold.rf(train,10)
a
mean(a)
iteration = 12
submission = predict(t1,newdata=test,type="class")
test_submission = test
test_submission[[1]] <- submission
# write file
submission_file_name = paste("./Submissions/submission",as.character(iteration),".csv",sep="")
submission_file_name
write.csv(test_submission,file=submission_file_name,row.names=FALSE)
diffsub(7,12)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=400)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=4,ntree = 1000,sampsize=400)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300,maxnodes=3)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300,maxnodes=4)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300,maxnodes=4)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300,maxnodes=5)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300,maxnodes=6)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=3,ntree = 1000,sampsize=300,maxnodes=10)
modelacc(train,t1)
t1<-randomForest(survived~.,data=train,mtry=4,ntree = 1000,sampsize=300,maxnodes=4)
modelacc(train,t1)
iteration = 13
a<-kfold.rf(train,10)
a
mean(a)
submission = predict(t1,newdata=test,type="class")
test_submission = test
test_submission[[1]] <- submission
# write file
submission_file_name = paste("./Submissions/submission",as.character(iteration),".csv",sep="")
submission_file_name
write.csv(test_submission,file=submission_file_name,row.names=FALSE)
diffsub(7,13)
View(train)
women <-train[train$sex=="female",c(-3,-4)]
women3 <- women[!is.na(women$age) & women$pclass==3,c(-2)]
family3 <- as.numeric(women3[[3]]+women3[[4]]+1)
women3 <- women[!is.na(women$age) && women$pclass==3,c(-2)]
women[!is.na(women$age) & women$pclass==3,c(-2)]
women[!is.na(women$age) & women$pclass==3,]
names(women3)
t1 <- tree(survived ~ .,data=women3)
iteration = 14
library(tree)
require(maptree)
library(randomForest)
setwd("/Users/aszostek/Projects/Kaggle/Titanic")
source("./Utils/submission_utils.R")
iteration = 14
# -----------------------
# Read Data
train.org <- read.csv(file="./Data/train.csv")
test.org <- read.csv(file="./Data/test.csv")
# -----------------------
# Data transoformations and feature creation
# Function to get the title of the passanger
gettitle<-function(name)
{
lname<-sub("^.*, ","",name)
lname<-sub("\\. .*$","",lname)
return(lname)
}
# Function which calculates an age for a given title Mr, Miss etc
# It uses information from both training and test set
# This function operates on original training set and test set!
age_title<-function()
{
# take original data
tr1<-train.org
te1<-test.org
# add survivor column to test set
te1<-cbind(factor(sample(c(0,1),nrow(te1),replace=T),levels=c(0,1)),te1)
names(te1)[[1]]<-"survived"
# Combine two tables togethe
all<-rbind(tr1,te1)
# select only samples with age provided
all<-all[!is.na(all$age),]
# Extract only Mr, Miss. etc
lname<-as.character(all[[3]])
lname<-sub("^.*, ","",lname)
lname<-sub("\\. .*$","",lname)
all$title<-as.factor(lname)
all<-all[,c("age","title","pclass")]
all$pclass <- as.factor(all$pclass)
fit <- lm(age ~ title+pclass,data=all)
return(fit)
}
guess.age<-function(passanger)
{
return(predict(age_title(),newdata=passanger)[[1]])
}
data.transformation<-function(data)
{
# If embarked missing fill with most frequent option which is S
data[data$embarked=="","embarked"]<-"S"
# calculate title of the passanger
data$title <- unlist(lapply(as.character(data$name),function(x) gettitle(x)))
# Clean classes of each column
if(names(data)[[1]]=="survived") data$survived<-as.factor(data$survived)
data$pclass<-as.factor(data$pclass)
data$name<-as.character(data$name)
data$ticket<-as.character(data$ticket)
data$cabin<-as.character(data$cabin)
data$embarked<-as.factor(as.character(data$embarked))
data$title<-as.factor(as.character(data$title))
data$sibsp<-as.numeric(data$sibsp)
data$parch <- as.numeric(data$parch)
# If it is a test set and doesn't have a survived column add one with fake data
# it is useful to have the same number of columns in training and test set
if(names(data)[[1]]!="survived")
{
data<-cbind(factor(sample(c(0,1),nrow(data),replace=T),levels=c(0,1)),data)
names(data)[[1]]<-"survived"
}
# Fill in missing age
# This function guesses age based on the title of the passange
for(i in 1:nrow(data))
{
if (is.na(data[i,"age"]))
data[i,"age"]<-guess.age(data[i,])
}
# Number of family members
data$family <- data$sibsp+data$parch+1
return(data[,c(-3,-8,-9,-10,-12)])
}
train <- data.transformation(train.org)
test <- data.transformation(test.org)
trainf <- train[train$sex=="female",]
trainm <- train[train$sex=="male",]
t1<-tree(survived~.,data=trainf)
plot(t1)
text(t1)
p1 <- predict(t1,newdata=trainf,type="class")
sum(trainf[[1]]==p1)/nrow(trainf)
t2<-tree(survived~.,data=trainm)
plot(t2)
text(t2)
p2 <- predict(t2,newdata=trainm,type="class")
sum(trainm[[1]]==p2)/nrow(trainm)
t1p < prune.tree(t1)
t1p <- prune.tree(t1)
t1<-tree(survived~.,data=trainf)
plot(t1)
text(t1)
t1p <- prune.tree(t1,best=4)
text(t1p)
plot(t1p)
t1<-tree(survived~.,data=trainf)
t1p <- prune.tree(t1,best=4)
plot(t1)
text(t1)
plot(t1p)
text(t1p)
p1 <- predict(t1p,newdata=trainf,type="class")
sum(trainf[[1]]==p1)/nrow(trainf)
t1p <- prune.tree(t1,best=5)
plot(t1)
text(t1)
plot(t1p)
text(t1p)
t1<-tree(survived~.,data=trainf)
t1p <- prune.tree(t1,best=4)
plot(t1p)
text(t1p)
plot(t0)
t0<-tree(survived~.,data=train)
plot(t0)
text(t0)
t1<-tree(survived~.,data=trainf)
t1p <- prune.tree(t1,best=4)
plot(t1p)
text(t1p)
t2<-tree(survived~.,data=trainm)
t2p <- prune.tree(t2,best=4)
t2<-tree(survived~.,data=trainm)
t2p <- prune.tree(t2,best=4)
plot(t2)
text(t2)
plot(t2p)
text(t2p)
plot(t2)
text(t2)
t0<-tree(survived~.,data=train)
plot(t0)
text(t0)
t0<-tree(survived~.,data=train)
plot(t0)
text(t0)
t2<-tree(survived~.,data=trainm)
t2p <- prune.tree(t2,best=4)
plot(t2)
text(t2)
plot(t2p)
text(t2p)
t0<-tree(survived~.,data=train)
plot(t0)
text(t0)
t2<-tree(survived~.,data=trainm)
t2p <- prune.tree(t2,best=4)
plot(t2)
text(t2)
plot(t2p)
text(t2p)
